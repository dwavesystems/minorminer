import random
import unittest

import dwave_networkx as dnx
import networkx as nx
from numpy import array

from minorminer.layout import layout

# Set a seed to standardize the randomness.
n = 9999
random.seed(n)
seed = random.randint(1, n)


class TestLayout(unittest.TestCase):

    def test_kamada_kawai(self):
        """
        Tests that the Kamada-Kawai layout is correct for K_4,4 (dimensions 1, 2, 3, 10); i.e. that it matches the pre-
        computed values in [-1, 1]^d.
        """
        G = nx.complete_bipartite_graph(4, 4)

        my_kamada_kawai = {d: layout.kamada_kawai(
            G, d=d, seed=seed) for d in pre_computed_kamada_kawai}

        for d, l in pre_computed_kamada_kawai.items():
            for v, p in l.items():
                for i, x in enumerate(p):
                    coordinate = my_kamada_kawai[d][v][i]
                    self.assertAlmostEqual(coordinate, x)
                    self.assertGreaterEqual(coordinate, -1)
                    self.assertLessEqual(coordinate, 1)

    def test_chimera(self):
        """
        Tests that the layout is correct for Chimera(4) (dimensions 2 and 3); i.e. that it matches the pre-computed 
        values in [-1, 1]^d.
        """
        G = dnx.chimera_graph(4)
        my_chimera = {d: layout.chimera(
            G, d=d) for d in pre_computed_chimera}

        for d, l in pre_computed_chimera.items():
            for v, p in l.items():
                for i, x in enumerate(p):
                    coordinate = my_chimera[d][v][i]
                    self.assertAlmostEqual(coordinate, x)
                    self.assertGreaterEqual(coordinate, -1)
                    self.assertLessEqual(coordinate, 1)


pre_computed_kamada_kawai = {
    1: {
        0: array([-1.]),
        1: array([-0.74999997]),
        2: array([-0.49999993]),
        3: array([-0.2499999]),
        4: array([0.2499999]),
        5: array([0.49999993]),
        6: array([0.74999997]),
        7: array([1.])
    },
    2: {
        0: array([1., -0.06320495]),
        1: array([0.53618338, 0.48755357]),
        2: array([-0.03438645,  0.72389135]),
        3: array([-0.75179941,  0.66241415]),
        4: array([-0.99999975,  0.06320475]),
        5: array([-0.53618328, -0.48755351]),
        6: array([0.03438642, -0.72389123]),
        7: array([0.75179908, -0.66241412])
    },
    3: {
        0: array([-0.98709905, -0.1467455, -0.14392173]),
        1: array([0.64128769, -0.68976331, -0.36001532]),
        2: array([0.98708649, 0.14677012, 0.14393496]),
        3: array([-0.64126773,  0.68975957,  0.3600116]),
        4: array([-0.12808806,  0.01386342, -0.99999759]),
        5: array([-0.21772691, -0.85033526,  0.49607745]),
        6: array([0.2177274,  0.85035448, -0.49608937]),
        7: array([0.12808017, -0.01390352,  1.])
    },
    10: {
        0: array([-1.,  0.14029899,  0.28687387,  0.18651374,  0.39668944,
                  -0.43120035,  0.15087843,  0.15002928,  0.70819066, -0.70950176]),
        1: array([0.74702881,  0.77938909,  0.09432316, -0.50056582, -0.24865196,
                  -0.25723954,  0.60890604, -0.69002551,  0.13703349,  0.33409856]),
        2: array([-0.22853146, -0.45075593, -0.7181411,  0.10456035,  0.60312017,
                  0.89164998, -0.11406198, -0.36983147, -0.62121529,  0.23176585]),
        3: array([0.48150304, -0.46892587,  0.33694644,  0.20949211, -0.75115823,
                  -0.20321651, -0.64572577,  0.90983074, -0.2240106,  0.1436377]),
        4: array([0.5653143, -0.13324933, -0.14883313,  0.96652688,  0.13539118,
                  0.35343568,  0.85628352,  0.38361186,  0.45911682, -0.04684403]),
        5: array([-0.25021981, -0.14126589, -0.79179585, -0.66333981, -0.9165724,
                  0.12704637, -0.19481089, -0.20852614,  0.21568323, -0.62970882]),
        6: array([-0.26440385,  0.78508537,  0.46821357,  0.64575101,  0.02804133,
                  -0.06709947, -0.84028861, -0.50792323, -0.43359484,  0.22454071]),
        7: array([-0.05069104, -0.51057644,  0.47241304, -0.94893846,  0.75314046,
                  -0.41337617,  0.17881927,  0.33283447, -0.24120348,  0.45201179])
    }
}

pre_computed_chimera = {
    2: {
        0: array([-1.,  0.84]),
        4: array([-0.84,  1.]),
        5: array([-0.84,  0.92]),
        6: array([-0.84,  0.76]),
        7: array([-0.84,  0.68]),
        1: array([-0.92,  0.84]),
        2: array([-0.76,  0.84]),
        3: array([-0.68,  0.84]),
        32: array([-1.,  0.28]),
        36: array([-0.84,  0.44]),
        37: array([-0.84,  0.36]),
        38: array([-0.84,  0.2]),
        39: array([-0.84,  0.12]),
        33: array([-0.92,  0.28]),
        34: array([-0.76,  0.28]),
        35: array([-0.68,  0.28]),
        64: array([-1., -0.28]),
        68: array([-0.84, -0.12]),
        69: array([-0.84, -0.2]),
        70: array([-0.84, -0.36]),
        71: array([-0.84, -0.44]),
        65: array([-0.92, -0.28]),
        66: array([-0.76, -0.28]),
        67: array([-0.68, -0.28]),
        96: array([-1., -0.84]),
        100: array([-0.84, -0.68]),
        101: array([-0.84, -0.76]),
        102: array([-0.84, -0.92]),
        103: array([-0.84, -1.]),
        97: array([-0.92, -0.84]),
        98: array([-0.76, -0.84]),
        99: array([-0.68, -0.84]),
        8: array([-0.44,  0.84]),
        12: array([-0.28,  1.]),
        13: array([-0.28,  0.92]),
        14: array([-0.28,  0.76]),
        15: array([-0.28,  0.68]),
        9: array([-0.36,  0.84]),
        10: array([-0.2,  0.84]),
        11: array([-0.12,  0.84]),
        40: array([-0.44,  0.28]),
        44: array([-0.28,  0.44]),
        45: array([-0.28,  0.36]),
        46: array([-0.28,  0.2]),
        47: array([-0.28,  0.12]),
        41: array([-0.36,  0.28]),
        42: array([-0.2,  0.28]),
        43: array([-0.12,  0.28]),
        72: array([-0.44, -0.28]),
        76: array([-0.28, -0.12]),
        77: array([-0.28, -0.2]),
        78: array([-0.28, -0.36]),
        79: array([-0.28, -0.44]),
        73: array([-0.36, -0.28]),
        74: array([-0.2, -0.28]),
        75: array([-0.12, -0.28]),
        104: array([-0.44, -0.84]),
        108: array([-0.28, -0.68]),
        109: array([-0.28, -0.76]),
        110: array([-0.28, -0.92]),
        111: array([-0.28, -1.]),
        105: array([-0.36, -0.84]),
        106: array([-0.2, -0.84]),
        107: array([-0.12, -0.84]),
        16: array([0.12, 0.84]),
        20: array([0.28, 1.]),
        21: array([0.28, 0.92]),
        22: array([0.28, 0.76]),
        23: array([0.28, 0.68]),
        17: array([0.2, 0.84]),
        18: array([0.36, 0.84]),
        19: array([0.44, 0.84]),
        48: array([0.12, 0.28]),
        52: array([0.28, 0.44]),
        53: array([0.28, 0.36]),
        54: array([0.28, 0.2]),
        55: array([0.28, 0.12]),
        49: array([0.2, 0.28]),
        50: array([0.36, 0.28]),
        51: array([0.44, 0.28]),
        80: array([0.12, -0.28]),
        84: array([0.28, -0.12]),
        85: array([0.28, -0.2]),
        86: array([0.28, -0.36]),
        87: array([0.28, -0.44]),
        81: array([0.2, -0.28]),
        82: array([0.36, -0.28]),
        83: array([0.44, -0.28]),
        112: array([0.12, -0.84]),
        116: array([0.28, -0.68]),
        117: array([0.28, -0.76]),
        118: array([0.28, -0.92]),
        119: array([0.28, -1.]),
        113: array([0.2, -0.84]),
        114: array([0.36, -0.84]),
        115: array([0.44, -0.84]),
        24: array([0.68, 0.84]),
        28: array([0.84, 1.]),
        29: array([0.84, 0.92]),
        30: array([0.84, 0.76]),
        31: array([0.84, 0.68]),
        25: array([0.76, 0.84]),
        26: array([0.92, 0.84]),
        27: array([1., 0.84]),
        56: array([0.68, 0.28]),
        60: array([0.84, 0.44]),
        61: array([0.84, 0.36]),
        62: array([0.84, 0.2]),
        63: array([0.84, 0.12]),
        57: array([0.76, 0.28]),
        58: array([0.92, 0.28]),
        59: array([1., 0.28]),
        88: array([0.68, -0.28]),
        92: array([0.84, -0.12]),
        93: array([0.84, -0.2]),
        94: array([0.84, -0.36]),
        95: array([0.84, -0.44]),
        89: array([0.76, -0.28]),
        90: array([0.92, -0.28]),
        91: array([1., -0.28]),
        120: array([0.68, -0.84]),
        124: array([0.84, -0.68]),
        125: array([0.84, -0.76]),
        126: array([0.84, -0.92]),
        127: array([0.84, -1.]),
        121: array([0.76, -0.84]),
        122: array([0.92, -0.84]),
        123: array([1., -0.84])
    },
    3: {
        0: array([-1.,  0.84,  -1.]),
        4: array([-0.84,  1.,  1.]),
        5: array([-0.84,  0.92,  1.]),
        6: array([-0.84,  0.76,  1.]),
        7: array([-0.84,  0.68,  1.]),
        1: array([-0.92,  0.84,  -1.]),
        2: array([-0.76,  0.84,  -1.]),
        3: array([-0.68,  0.84,  -1.]),
        32: array([-1.,  0.28,  -1.]),
        36: array([-0.84,  0.44,  1.]),
        37: array([-0.84,  0.36,  1.]),
        38: array([-0.84,  0.2,  1.]),
        39: array([-0.84,  0.12,  1.]),
        33: array([-0.92,  0.28,  -1.]),
        34: array([-0.76,  0.28,  -1.]),
        35: array([-0.68,  0.28,  -1.]),
        64: array([-1., -0.28,  -1.]),
        68: array([-0.84, -0.12,  1.]),
        69: array([-0.84, -0.2,  1.]),
        70: array([-0.84, -0.36,  1.]),
        71: array([-0.84, -0.44,  1.]),
        65: array([-0.92, -0.28,  -1.]),
        66: array([-0.76, -0.28,  -1.]),
        67: array([-0.68, -0.28,  -1.]),
        96: array([-1., -0.84,  -1.]),
        100: array([-0.84, -0.68,  1.]),
        101: array([-0.84, -0.76,  1.]),
        102: array([-0.84, -0.92,  1.]),
        103: array([-0.84, -1.,  1.]),
        97: array([-0.92, -0.84,  -1.]),
        98: array([-0.76, -0.84,  -1.]),
        99: array([-0.68, -0.84,  -1.]),
        8: array([-0.44,  0.84,  -1.]),
        12: array([-0.28,  1.,  1.]),
        13: array([-0.28,  0.92,  1.]),
        14: array([-0.28,  0.76,  1.]),
        15: array([-0.28,  0.68,  1.]),
        9: array([-0.36,  0.84,  -1.]),
        10: array([-0.2,  0.84,  -1.]),
        11: array([-0.12,  0.84,  -1.]),
        40: array([-0.44,  0.28,  -1.]),
        44: array([-0.28,  0.44,  1.]),
        45: array([-0.28,  0.36,  1.]),
        46: array([-0.28,  0.2,  1.]),
        47: array([-0.28,  0.12,  1.]),
        41: array([-0.36,  0.28,  -1.]),
        42: array([-0.2,  0.28,  -1.]),
        43: array([-0.12,  0.28,  -1.]),
        72: array([-0.44, -0.28,  -1.]),
        76: array([-0.28, -0.12,  1.]),
        77: array([-0.28, -0.2,  1.]),
        78: array([-0.28, -0.36,  1.]),
        79: array([-0.28, -0.44,  1.]),
        73: array([-0.36, -0.28,  -1.]),
        74: array([-0.2, -0.28,  -1.]),
        75: array([-0.12, -0.28,  -1.]),
        104: array([-0.44, -0.84,  -1.]),
        108: array([-0.28, -0.68,  1.]),
        109: array([-0.28, -0.76,  1.]),
        110: array([-0.28, -0.92,  1.]),
        111: array([-0.28, -1.,  1.]),
        105: array([-0.36, -0.84,  -1.]),
        106: array([-0.2, -0.84,  -1.]),
        107: array([-0.12, -0.84,  -1.]),
        16: array([0.12, 0.84, -1.]),
        20: array([0.28, 1., 1.]),
        21: array([0.28, 0.92, 1.]),
        22: array([0.28, 0.76, 1.]),
        23: array([0.28, 0.68, 1.]),
        17: array([0.2, 0.84, -1.]),
        18: array([0.36, 0.84, -1.]),
        19: array([0.44, 0.84, -1.]),
        48: array([0.12, 0.28, -1.]),
        52: array([0.28, 0.44, 1.]),
        53: array([0.28, 0.36, 1.]),
        54: array([0.28, 0.2, 1.]),
        55: array([0.28, 0.12, 1.]),
        49: array([0.2, 0.28, -1.]),
        50: array([0.36, 0.28, -1.]),
        51: array([0.44, 0.28, -1.]),
        80: array([0.12, -0.28,  -1.]),
        84: array([0.28, -0.12,  1.]),
        85: array([0.28, -0.2,  1.]),
        86: array([0.28, -0.36,  1.]),
        87: array([0.28, -0.44,  1.]),
        81: array([0.2, -0.28,  -1.]),
        82: array([0.36, -0.28,  -1.]),
        83: array([0.44, -0.28,  -1.]),
        112: array([0.12, -0.84,  -1.]),
        116: array([0.28, -0.68,  1.]),
        117: array([0.28, -0.76,  1.]),
        118: array([0.28, -0.92,  1.]),
        119: array([0.28, -1.,  1.]),
        113: array([0.2, -0.84,  -1.]),
        114: array([0.36, -0.84,  -1.]),
        115: array([0.44, -0.84,  -1.]),
        24: array([0.68, 0.84, -1.]),
        28: array([0.84, 1., 1.]),
        29: array([0.84, 0.92, 1.]),
        30: array([0.84, 0.76, 1.]),
        31: array([0.84, 0.68, 1.]),
        25: array([0.76, 0.84, -1.]),
        26: array([0.92, 0.84, -1.]),
        27: array([1., 0.84, -1.]),
        56: array([0.68, 0.28, -1.]),
        60: array([0.84, 0.44, 1.]),
        61: array([0.84, 0.36, 1.]),
        62: array([0.84, 0.2, 1.]),
        63: array([0.84, 0.12, 1.]),
        57: array([0.76, 0.28, -1.]),
        58: array([0.92, 0.28, -1.]),
        59: array([1., 0.28, -1.]),
        88: array([0.68, -0.28,  -1.]),
        92: array([0.84, -0.12,  1.]),
        93: array([0.84, -0.2,  1.]),
        94: array([0.84, -0.36,  1.]),
        95: array([0.84, -0.44,  1.]),
        89: array([0.76, -0.28,  -1.]),
        90: array([0.92, -0.28,  -1.]),
        91: array([1., -0.28,  -1.]),
        120: array([0.68, -0.84,  -1.]),
        124: array([0.84, -0.68,  1.]),
        125: array([0.84, -0.76,  1.]),
        126: array([0.84, -0.92,  1.]),
        127: array([0.84, -1.,  1.]),
        121: array([0.76, -0.84,  -1.]),
        122: array([0.92, -0.84,  -1.]),
        123: array([1., -0.84,  -1.])
    }
}

if __name__ == '__main__':
    unittest.main()
