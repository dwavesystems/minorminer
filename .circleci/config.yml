version: 2
jobs:
  coverage-gcc:
    docker:
       - image: bellert/cmake:4
    working_directory: ~/repo
    steps:
      - checkout
      - run: &cpp-template
          name: run unittests
          command: |
            mkdir -p build;
            cd build;
            cmake .. -DMINORMINER_BUILD_TESTS=ON;
            make CC=$C_COMPILER CXX=$CXX_COMPILER;
            ./tests/run_tests;
          environment:
            C_COMPILER: gcc
            CXX_COMPILER: g++

  coverage-gcc-4.8:
    docker:
       - image: bellert/cmake:4
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          <<: *cpp-template
          environment:
            C_COMPILER: gcc-4.8
            CXX_COMPILER: g++-4.8

  coverage-clang:
    docker:
       - image: bellert/cmake:4
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          <<: *cpp-template
          environment:
            C_COMPILER: clang
            CXX_COMPILER: clang++

  coverage-osx:
    macos:
      xcode: "12.2.0"
    environment:
      HOMEBREW_NO_AUTO_UPDATE: 1
      PYTHON: 3.8.6
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: install cmake
          command: |
            brew install cmake
      - run:
          <<: *cpp-template
          environment:
            C_COMPILER: gcc
            CXX_COMPILER: g++
      - run:
          <<: *cpp-template
          environment:
            C_COMPILER: clang
            CXX_COMPILER: clang++
      - run:
          name: install pyenv
          command: |
            brew install pyenv
      - restore_cache:
          keys:
            - v2-pyenv-{{ .Environment.CIRCLE_JOB }}-xcode-12.2.0
      - run:
          name: install python
          command: |
            pyenv install $PYTHON -s
      - save_cache:
          paths:
            - ~/.pyenv
          key: v2-pyenv-{{ .Environment.CIRCLE_JOB }}-xcode-12.2.0
      - run:
          name: create virtualenv
          command: |
            eval "$(pyenv init -)"
            pyenv local $PYTHON
            python -m pip install virtualenv
            python -m virtualenv env
      - run:
          name: coveralls
          command: |
            if [[ -n $COVERALLS_REPO_TOKEN ]]; then
              . env/bin/activate;
              python -m pip install cpp-coveralls;
              find build \( -name '*.gcno' -or -name '*.gcda' \) -exec mv {} . \;
              coveralls --exclude tests -E '.*gtest.*' --gcov-options '\-lp';
            fi;

  test-3.9: &full-test-template
    docker:
      - image: circleci/python:3.9

    working_directory: ~/repo

    steps:

      - checkout

      - restore_cache: &restore-cache-template
          keys:
          - v2-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "test_requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}

      - run:
          name: create virtualenv
          command: |
            python -m virtualenv env

      - run: &install-dependencies-template
          name: install dependencies
          command: |
            . env/bin/activate
            python --version
            pip install -r requirements.txt -r test_requirements.txt

      - save_cache: &save-cache-template
          paths:
            - ./env
          key: v2-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "test_requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}

      - run: &build-ext-template
          name: install package
          command: |
            . env/bin/activate
            python setup.py build_ext --inplace

      - run: &run-tests-template
          name: run unittests
          command: |
            . env/bin/activate
            python --version
            python -m pytest . --verbose
          environment:
            CPPDEBUG: 1

      - run: &run-doctest-template
          name: doctest
          command: |
            . env/bin/activate
            pip install -r requirements.txt -r docs/requirements.txt
            python setup.py install
            make -C docs/ doctest
      - run:
          name: linkcheck
          command: |
            . env/bin/activate
            make -C docs/ linkcheck

      - run: &sdist-build-template
          name: build sdist
          command: |
            . env/bin/activate
            python setup.py sdist

      - store_artifacts:
          path: ./dist

      - run: &sdist-install-template
          name: install sdist without cython
          command: |
            python -m virtualenv env_sdist
            . env_sdist/bin/activate
            pip install dist/minorminer-*.tar.gz

      - run: &sdist-cython-install-template
          name: install sdist with cython
          command: |
            python -m virtualenv env_cython_sdist
            . env_cython_sdist/bin/activate
            pip install cython
            pip install dist/minorminer-*.tar.gz

  test-3.8:
    <<: *full-test-template
    docker:
      - image: circleci/python:3.8

  test-3.7:
    <<: *full-test-template
    docker:
      - image: circleci/python:3.7

  test-3.6:
    <<: *full-test-template
    docker:
      - image: circleci/python:3.6

  test-osx-3.9: &osx-tests-template
    macos:
      xcode: "12.2.0"
    environment:
      PYTHON: 3.9.0
      HOMEBREW_NO_AUTO_UPDATE: 1

    working_directory: ~/repo

    steps: 
      - checkout

      - run: 
          name: install pyenv
          command: |
            brew install pyenv

      - restore_cache:
          keys:
            - v2-pyenv-{{ .Environment.CIRCLE_JOB }}-xcode-12.2.0

      - run:
          name: install python
          command: |
            pyenv install $PYTHON -s

      - save_cache:
          paths:
            - ~/.pyenv
          key: v2-pyenv-{{ .Environment.CIRCLE_JOB }}-xcode-12.2.0

      - restore_cache: *restore-cache-template

      - run:
          name: create virtualenv
          command: |
            eval "$(pyenv init -)"
            pyenv local $PYTHON
            python -m pip install virtualenv
            python -m virtualenv env

      - run:
          name: install dependencies
          command: |
            eval "$(pyenv init -)"
            python --version
            pip install -r requirements.txt -r test_requirements.txt

      - save_cache: *save-cache-template

      - run:
          name: install package
          command: |
            eval "$(pyenv init -)"
            python setup.py build_ext --inplace
        
      - run:
          name: run unittests
          command: |
            eval "$(pyenv init -)"
            python --version
            python -m pytest . --verbose
          environment:
            CPPDEBUG: 1

      - run:
          name: build sdist
          command: |
            eval "$(pyenv init -)"
            python setup.py sdist

      - run: 
          name: install sdist without cython
          command: |
            eval "$(pyenv init -)"
            pyenv local $PYTHON
            pip install dist/minorminer-*.tar.gz

      - run:
          name: install sdist with cython
          command: |
            eval "$(pyenv init -)"
            pip install cython
            pip install dist/minorminer-*.tar.gz

  test-osx-3.8:
    <<: *osx-tests-template
    environment:
      PYTHON: 3.8.6
      HOMEBREW_NO_AUTO_UPDATE: 1

  test-osx-3.7:
    <<: *osx-tests-template
    environment:
      PYTHON: 3.7.9
      HOMEBREW_NO_AUTO_UPDATE: 1

  test-osx-3.6:
    <<: *osx-tests-template
    environment:
      PYTHON: 3.6.12
      HOMEBREW_NO_AUTO_UPDATE: 1

  deploy-manylinux-64: &manylinux-template
    docker:
      - image: quay.io/pypa/manylinux1_x86_64

    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: build wheels
          command: |
            for PYBIN in /opt/python/*/bin; do
              if "${PYBIN}/python" -c "import sys; sys.exit(sys.version_info>=(3, 6) and sys.version_info<(3, 10))"; then continue; fi;
              "${PYBIN}/pip" install -r requirements.txt -r test_requirements.txt
              "${PYBIN}/pip" wheel . -w ./wheelhouse
              "${PYBIN}/python" setup.py sdist -d ./dist
            done

      - run:
          name: bundle shared libraries into wheels
          command: |
            for whl in ./wheelhouse/minorminer*.whl; do
              auditwheel repair "$whl" -w ./dist
            done

      - store_artifacts:
          path: ./dist

      - run: &init-pypirc-template
          name: init .pypirc
          command: |
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username = $PYPI_USERNAME" >> ~/.pypirc
            echo -e "password = $PYPI_PASSWORD" >> ~/.pypirc

      - run:
          name: create a virtualenv
          command: |
            pythons=(/opt/python/*/bin)
            python="${pythons[0]}"
            "$python/pip" install virtualenv
            "$python/python" -m virtualenv env

      - run: &upload-template
          name: install twine and deploy
          command: |
            . env/bin/activate
            python -m pip install twine
            twine upload --skip-existing ./dist/*


  deploy-manylinux-32:
    <<: *manylinux-template
    docker:
      - image: quay.io/pypa/manylinux1_i686

  deploy-osx-3.9: &osx-deploy-template
    macos:
      xcode: "12.2.0"
    environment:
      PYTHON: 3.9.0
      HOMEBREW_NO_AUTO_UPDATE: 1

    working_directory: ~/repo

    steps: 
      - checkout

      - run: 
          name: install pyenv
          command: |
            brew install pyenv

      - restore_cache:
          keys:
            - v2-pyenv-{{ .Environment.CIRCLE_JOB }}-xcode-12.2.0

      - run:
          name: install python
          command: |
            pyenv install $PYTHON -s

      - save_cache:
          paths:
            - ~/.pyenv
          key: v2-pyenv-{{ .Environment.CIRCLE_JOB }}-xcode-12.2.0

      - run:
          name: create virtualenv
          command: |
            eval "$(pyenv init -)"
            pyenv local $PYTHON
            python -m pip install virtualenv
            python -m virtualenv env

      - run: *install-dependencies-template

      - run: *build-ext-template
        
      - run:
          name: create bdist_wheel
          command: |
            . env/bin/activate
            python setup.py bdist_wheel

      - store_artifacts:
          path: ./dist

      - run: *init-pypirc-template

      - run: *upload-template

  deploy-osx-3.8:
    <<: *osx-deploy-template
    environment:
      PYTHON: 3.8.6
      HOMEBREW_NO_AUTO_UPDATE: 1

  deploy-osx-3.7:
    <<: *osx-deploy-template
    environment:
      PYTHON: 3.7.9
      HOMEBREW_NO_AUTO_UPDATE: 1

  deploy-osx-3.6:
    <<: *osx-deploy-template
    environment:
      PYTHON: 3.6.12
      HOMEBREW_NO_AUTO_UPDATE: 1

workflows:
  version: 2
  test:
    jobs:
      - coverage-gcc
      - coverage-gcc-4.8
      - coverage-clang
      - coverage-osx
      - test-3.9
      - test-3.8
      - test-3.7
      - test-3.6
      - test-osx-3.9
      - test-osx-3.8
      - test-osx-3.7
      - test-osx-3.6
  deploy:
    jobs:
      - deploy-manylinux-64:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*(\.dev([0-9]+)?)?$/
            branches:
              ignore: /.*/
      - deploy-manylinux-32:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*(\.dev([0-9]+)?)?$/
            branches:
              ignore: /.*/
      - deploy-osx-3.9:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*(\.dev([0-9]+)?)?$/
            branches:
              ignore: /.*/
      - deploy-osx-3.8:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*(\.dev([0-9]+)?)?$/
            branches:
              ignore: /.*/
      - deploy-osx-3.7:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*(\.dev([0-9]+)?)?$/
            branches:
              ignore: /.*/
      - deploy-osx-3.6:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*(\.dev([0-9]+)?)?$/
            branches:
              ignore: /.*/
