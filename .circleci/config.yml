version: 2.1

orbs:
  macos: circleci/macos@2.4
  win: circleci/windows@5.0

commands:
  run-cibuildwheel:
    parameters:
      cibw-version:
        type: string
        default: 3.2.1
    steps:
      - run:
          name: run cibuildwheel
          shell: bash -eo pipefail
          command: |
            python -m pip install --user cibuildwheel==<< parameters.cibw-version >>
            python -m cibuildwheel --output-dir dist

      - store_artifacts: &store-artifacts
          path: ./dist
      - persist_to_workspace: &persist-to-workspace
          root: ./dist/
          paths: .

environment: &global-environment
  PIP_PROGRESS_BAR: 'off'

jobs:
  build-and-test-linux:
    parameters:
      python-version:
        type: string

    docker:
      - image: cimg/python:3.12

    environment:
      <<: *global-environment
      CIBW_PROJECT_REQUIRES_PYTHON: ~=<< parameters.python-version>>
      CIBW_ARCHS_LINUX: x86_64

    steps:
      - checkout
      - run: &initialize-submodules
          name: get submodules
          command: |
            git submodule init
            git submodule update
      - setup_remote_docker
      - run-cibuildwheel

  build-and-test-linux-aarch64:
    parameters:
      python-version:
        type: string

    machine:
      image: default

    resource_class: arm.medium

    environment:
      <<: *global-environment
      CIBW_PROJECT_REQUIRES_PYTHON: ~=<< parameters.python-version>>
      CIBW_ARCHS_LINUX: aarch64

    steps:
      - checkout
      - run: *initialize-submodules
      - run-cibuildwheel

  build-and-test-osx:
    parameters:
      python-version:
        type: string
      cibw-arch:
        type: string

    macos:
      xcode: 16.4.0
    resource_class: macos.m1.medium.gen1

    environment:
      <<: *global-environment
      CIBW_PROJECT_REQUIRES_PYTHON: ~=<< parameters.python-version>>
      CIBW_ARCHS_MACOS: << parameters.cibw-arch >>

    steps:
      - checkout
      - macos/install-rosetta
      - run: *initialize-submodules
      - run-cibuildwheel

  build-and-test-windows:
    parameters:
      python-version:
        type: string

    executor:
      name: win/default

    environment:
      <<: *global-environment
      CIBW_PROJECT_REQUIRES_PYTHON: ~=<< parameters.python-version>>
      CIBW_ARCHS_WINDOWS: AMD64

    steps:
      - checkout
      - run: *initialize-submodules
      - run-cibuildwheel

  deploy-all:
    docker:
      - image: cimg/python:3.12

    steps:
      - attach_workspace:
          at: dist

      - store_artifacts:
          path: ./dist

      - run:
          name: deploy
          command: |
            python -m venv env
            . env/bin/activate
            python -m pip install twine
            twine upload -u "$PYPI_USERNAME" -p "$PYPI_PASSWORD" --skip-existing ./dist/*

  build-sdist:
    docker:
      - image: cimg/python:3.12

    steps:
      - checkout
      - run: *initialize-submodules
      - run:
          name: build sdist
          command: |
            python -m venv env
            . env/bin/activate
            pip install -U pip setuptools
            pip install -r requirements.txt
            python setup.py sdist -d ./dist
      - store_artifacts: *store-artifacts
      - persist_to_workspace: *persist-to-workspace

  test-sdist:
    docker:
      - image: cimg/python:3.12

    steps:
      - checkout
      - run: *initialize-submodules
      - attach_workspace:
          at: dist
      - run:
          name: install from sdist
          command: |
            python -m venv env
            . env/bin/activate
            pip install dist/minorminer*.tar.gz
      - run:
          name: run tests
          command: |
            . env/bin/activate
            pip install -r tests/requirements.txt
            pytest tests/

  test-dependencies:
    parameters:
      dependency-versions:
        type: string
      python-version:
        type: string

    docker:
      - image: python:<< parameters.python-version >>-slim

    steps:
      - checkout
      - attach_workspace:
          at: dist
      - run:
          name: install
          command: |
            python -m venv env
            . env/bin/activate
            pip install --upgrade pip wheel
            pip install --upgrade --prefer-binary << parameters.dependency-versions >>
            pip install minorminer --no-index -f dist/ --no-deps --force-reinstall
      - run:
          name: run tests
          command: |
            . env/bin/activate
            pip install -r tests/requirements.txt
            pytest tests/

workflows:
  test:
    jobs:
      - build-and-test-linux: &build
          matrix:
            parameters:
              python-version: &python-versions [3.10.0, 3.11.0, 3.12.0, 3.13.0, 3.14.0]
      - build-and-test-linux-aarch64:
          matrix:
            parameters:
              python-version: *python-versions
      - build-sdist
      - build-and-test-osx: &build-and-test-osx
          matrix:
            parameters:
              python-version: *python-versions
              cibw-arch: [x86_64, arm64]
      - build-and-test-windows: *build
      - test-sdist:
          requires:
            - build-sdist
      - test-dependencies:
          requires:
            - build-and-test-linux
          matrix:
            parameters:
              python-version: *python-versions
              dependency-versions: ["dwave-networkx==0.8.13 fasteners==0.15 homebase==1.0.1 networkx==2.4 oldest-supported-numpy scipy==1.7.3",  # oldest supported
                                    "dwave-networkx fasteners homebase networkx numpy scipy", # latest
                                    ]
            exclude:
              # SciPy 1.7.3 doesn't support Python 3.11+
              - python-version: 3.11.0
                dependency-versions: "dwave-networkx==0.8.13 fasteners==0.15 homebase==1.0.1 networkx==2.4 oldest-supported-numpy scipy==1.7.3"
              - python-version: 3.12.0
                dependency-versions: "dwave-networkx==0.8.13 fasteners==0.15 homebase==1.0.1 networkx==2.4 oldest-supported-numpy scipy==1.7.3"
              - python-version: 3.13.0
                dependency-versions: "dwave-networkx==0.8.13 fasteners==0.15 homebase==1.0.1 networkx==2.4 oldest-supported-numpy scipy==1.7.3"
              - python-version: 3.14.0
                dependency-versions: "dwave-networkx==0.8.13 fasteners==0.15 homebase==1.0.1 networkx==2.4 oldest-supported-numpy scipy==1.7.3"

  deploy:
    jobs:
      - build-and-test-linux: &deploy-build
          <<: *build
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
            branches:
              ignore: /.*/
      - build-and-test-linux-aarch64:
          matrix:
            parameters:
              python-version: *python-versions
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
            branches:
              ignore: /.*/
      - build-and-test-osx:
          <<: *build-and-test-osx
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
            branches:
              ignore: /.*/
      - build-sdist:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
            branches:
              ignore: /.*/
      - build-and-test-windows: *deploy-build
      - deploy-all:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
            branches:
              ignore: /.*/
          requires:
            - build-and-test-linux
            - build-and-test-linux-aarch64
            - build-and-test-osx
            - build-sdist
            - build-and-test-windows
