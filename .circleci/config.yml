version: 2.1

orbs:
  win: circleci/windows@2.2.0

commands:
  run-cibuildwheel:
    parameters:
      cibw-version:
        type: string
        default: 2.11.2
    steps:
      - run:
          name: run cibuildwheel
          shell: bash -eo pipefail
          command: |
            if [[ $OS == Windows_NT ]]; then
              python -m pip install --user cibuildwheel==<< parameters.cibw-version >>
              python -m cibuildwheel --output-dir dist
            else
              python3 -m pip install --user cibuildwheel==<< parameters.cibw-version >>
              python3 -m cibuildwheel --output-dir dist
            fi

      - store_artifacts: &store-artifacts
          path: ./dist
      - persist_to_workspace: &persist-to-workspace
          root: ./dist/
          paths: .

environment: &global-environment
  PIP_PROGRESS_BAR: 'off'

jobs:
  coverage-gcc:
    docker:
       - image: bellert/cmake:4
    working_directory: ~/repo
    steps:
      - checkout
      - run: &cpp-template
          name: run unittests
          command: |
            mkdir -p build;
            cd build;
            cmake .. -DMINORMINER_BUILD_TESTS=ON;
            make CC=$C_COMPILER CXX=$CXX_COMPILER;
            ./tests/run_tests;
          environment:
            C_COMPILER: gcc
            CXX_COMPILER: g++

  coverage-gcc-48:
    docker:
       - image: bellert/cmake:4
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          <<: *cpp-template
          environment:
            C_COMPILER: gcc-4.8
            CXX_COMPILER: g++-4.8

  coverage-clang:
    docker:
       - image: bellert/cmake:4
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          <<: *cpp-template
          environment:
            C_COMPILER: clang
            CXX_COMPILER: clang++

  coverage-osx:
    macos:
      xcode: "12.5.1"
    environment:
      HOMEBREW_NO_AUTO_UPDATE: 1
      PYTHON: 3.8.6
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: install cmake
          command: |
            brew install cmake
      - run:
          <<: *cpp-template
          environment:
            C_COMPILER: gcc
            CXX_COMPILER: g++
      - run:
          <<: *cpp-template
          environment:
            C_COMPILER: clang
            CXX_COMPILER: clang++
      - run:
          name: install pyenv
          command: |
            git clone https://github.com/pyenv/pyenv.git ~/.pyenv --branch v2.3.4
            echo '' >> ~/.bash_profile
            echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ~/.bash_profile
            echo 'command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"' >> ~/.bash_profile
            echo 'eval "$(pyenv init -)"' >> ~/.bash_profile
      - restore_cache:
          keys:
            - v2-pyenv-{{ .Environment.CIRCLE_JOB }}-xcode-12.5.1
      - run:
          name: install python
          command: |
            pyenv install $PYTHON -s
      - save_cache:
          paths:
            - ~/.pyenv
          key: v2-pyenv-{{ .Environment.CIRCLE_JOB }}-xcode-12.5.1
      - run:
          name: create virtualenv
          command: |
            pyenv local $PYTHON
            python -m pip install virtualenv
            python -m virtualenv env
      - run:
          name: coveralls
          command: |
            if [[ -n $COVERALLS_REPO_TOKEN ]]; then
              . env/bin/activate;
              python -m pip install cpp-coveralls;
              find build \( -name '*.gcno' -or -name '*.gcda' \) -exec mv {} . \;
              coveralls --exclude tests -E '.*gtest.*' --gcov-options '\-lp';
            fi;

  build-and-test-linux:
    parameters:
      python-version:
        type: string

    docker:
      - image: cimg/python:3.9

    environment:
      <<: *global-environment
      CIBW_PROJECT_REQUIRES_PYTHON: ~=<< parameters.python-version>>
      CIBW_ARCHS_LINUX: x86_64

    steps:
      - checkout
      - run: &initialize-submodules
          name: get submodules
          command: |
            git submodule init
            git submodule update
      - setup_remote_docker
      - run-cibuildwheel

  build-and-test-linux-aarch64:
    parameters:
      python-version:
        type: string

    machine:
      image: ubuntu-2004:202101-01

    resource_class: arm.medium

    environment:
      <<: *global-environment
      CIBW_PROJECT_REQUIRES_PYTHON: ~=<< parameters.python-version>>
      CIBW_ARCHS_LINUX: aarch64

    steps:
      - checkout
      - run: *initialize-submodules
      - run-cibuildwheel

  build-and-test-osx:
    parameters:
      python-version:
        type: string
      cibw-arch:
        type: string

    macos:
      xcode: 12.5.1

    environment:
      <<: *global-environment
      CIBW_PROJECT_REQUIRES_PYTHON: ~=<< parameters.python-version>>
      CIBW_ARCHS_MACOS: << parameters.cibw-arch >>

    steps:
      - checkout
      - run: *initialize-submodules
      - run-cibuildwheel

  build-and-test-windows:
    parameters:
      python-version:
        type: string

    executor:
      name: win/default

    environment:
      <<: *global-environment
      CIBW_PROJECT_REQUIRES_PYTHON: ~=<< parameters.python-version>>
      CIBW_ARCHS_WINDOWS: AMD64

    steps:
      - checkout
      - run: *initialize-submodules
      - run-cibuildwheel

  deploy-all:
    docker:
      - image: cimg/python:3.9

    steps:
      - attach_workspace:
          at: dist

      - store_artifacts:
          path: ./dist

      - run:
          name: deploy
          command: |
            python -m venv env
            . env/bin/activate
            python -m pip install twine
            twine upload -u "$PYPI_USERNAME" -p "$PYPI_PASSWORD" --skip-existing ./dist/*

  build-sdist:
    docker:
      - image: cimg/python:3.9

    steps:
      - checkout
      - run: *initialize-submodules
      - run:
          name: build sdist
          command: |
            python -m venv env
            . env/bin/activate
            pip install -U pip setuptools
            pip install -r requirements.txt
            python setup.py sdist -d ./dist
      - store_artifacts: *store-artifacts
      - persist_to_workspace: *persist-to-workspace

  test-sdist:
    docker:
      - image: cimg/python:3.9

    steps:
      - checkout
      - run: *initialize-submodules
      - attach_workspace:
          at: dist
      - run:
          name: install from sdist
          command: |
            python -m venv env
            . env/bin/activate
            pip install dist/minorminer*.tar.gz
      - run:
          name: run tests
          command: |
            . env/bin/activate
            pip install -r test_requirements.txt
            pytest tests/

  test-dependencies:
    parameters:
      dependency-versions:
        type: string
      python-version:
        type: string

    docker:
      - image: python:<< parameters.python-version >>-slim

    steps:
      - checkout
      - attach_workspace:
          at: dist
      - run:
          name: install
          command: |
            python -m venv env
            . env/bin/activate
            pip install --upgrade << parameters.dependency-versions >>
            pip install minorminer --no-index -f dist/ --no-deps --force-reinstall
      - run:
          name: run tests
          command: |
            . env/bin/activate
            pip install --upgrade setuptools pip
            pip install -r test_requirements.txt
            pytest tests/

workflows:
  test:
    jobs:
      - coverage-gcc
      - coverage-gcc-48
      - coverage-clang
      - coverage-osx
      - build-and-test-linux: &build
          matrix:
            parameters:
              python-version: &python-versions [3.7.9, 3.8.9, 3.9.4, 3.10.0, 3.11.0]
      - build-and-test-linux-aarch64:
          matrix:
            parameters:
              python-version: *python-versions
            exclude:
              - python-version: 3.7.9
      - build-sdist
      - build-and-test-osx: &build-and-test-osx
          matrix:
            parameters:
              python-version: *python-versions
              cibw-arch: [x86_64, arm64]
            exclude:
              - python-version: 3.7.9
                cibw-arch: arm64
      - build-and-test-windows: *build
      - test-sdist:
          requires:
            - build-sdist 
      - test-dependencies:
          requires:
            - build-and-test-linux
          matrix:
            parameters:
              python-version: *python-versions
              dependency-versions: ["dwave-networkx==0.8.10 fasteners==0.15 homebase==1.0.1 networkx==2.4 oldest-supported-numpy rectangle-packer==2.0.1 scipy==1.7.3",  # oldest supported
                                    "dwave-networkx fasteners homebase networkx numpy rectangle-packer scipy", # latest
                                    ]
            exclude:
              # SciPy 1.7.3 doesn't support Python 3.11
              - python-version: 3.11.0
                dependency-versions: "dwave-networkx==0.8.10 fasteners==0.15 homebase==1.0.1 networkx==2.4 oldest-supported-numpy rectangle-packer==2.0.1 scipy==1.7.3"

  deploy:
    jobs:
      - build-and-test-linux: &deploy-build
          <<: *build
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
            branches:
              ignore: /.*/
      - build-and-test-linux-aarch64:
          matrix:
            parameters:
              python-version: *python-versions
            exclude:
              - python-version: 3.7.9
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
            branches:
              ignore: /.*/
      - build-and-test-osx:
          <<: *build-and-test-osx
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
            branches:
              ignore: /.*/
      - build-sdist:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
            branches:
              ignore: /.*/
      - build-and-test-windows: *deploy-build
      - deploy-all:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
            branches:
              ignore: /.*/
          requires:
            - build-and-test-linux
            - build-and-test-linux-aarch64
            - build-and-test-osx
            - build-sdist
            - build-and-test-windows
