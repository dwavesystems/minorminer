version: 2.1

environment: &global-environment
  CIBW_BUILD_VERBOSITY: 1
  CIBW_MANYLINUX_X86_64_IMAGE: manylinux2010
  CIBW_SKIP: pp* *musllinux*
  PIP_PROGRESS_BAR: 'off'

jobs:
  coverage-gcc:
    docker:
       - image: bellert/cmake:4
    working_directory: ~/repo
    steps:
      - checkout
      - run: &cpp-template
          name: run unittests
          command: |
            mkdir -p build;
            cd build;
            cmake .. -DMINORMINER_BUILD_TESTS=ON;
            make CC=$C_COMPILER CXX=$CXX_COMPILER;
            ./tests/run_tests;
          environment:
            C_COMPILER: gcc
            CXX_COMPILER: g++

  coverage-gcc-48:
    docker:
       - image: bellert/cmake:4
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          <<: *cpp-template
          environment:
            C_COMPILER: gcc-4.8
            CXX_COMPILER: g++-4.8

  coverage-clang:
    docker:
       - image: bellert/cmake:4
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          <<: *cpp-template
          environment:
            C_COMPILER: clang
            CXX_COMPILER: clang++

  coverage-osx:
    macos:
      xcode: "12.2.0"
    environment:
      HOMEBREW_NO_AUTO_UPDATE: 1
      PYTHON: 3.8.6
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: install cmake
          command: |
            brew install cmake
      - run:
          <<: *cpp-template
          environment:
            C_COMPILER: gcc
            CXX_COMPILER: g++
      - run:
          <<: *cpp-template
          environment:
            C_COMPILER: clang
            CXX_COMPILER: clang++
      - run:
          name: install pyenv
          command: |
            brew install pyenv
      - restore_cache:
          keys:
            - v2-pyenv-{{ .Environment.CIRCLE_JOB }}-xcode-12.2.0
      - run:
          name: install python
          command: |
            pyenv install $PYTHON -s
      - save_cache:
          paths:
            - ~/.pyenv
          key: v2-pyenv-{{ .Environment.CIRCLE_JOB }}-xcode-12.2.0
      - run:
          name: create virtualenv
          command: |
            eval "$(pyenv init -)"
            pyenv local $PYTHON
            python -m pip install virtualenv
            python -m virtualenv env
      - run:
          name: coveralls
          command: |
            if [[ -n $COVERALLS_REPO_TOKEN ]]; then
              . env/bin/activate;
              python -m pip install cpp-coveralls;
              find build \( -name '*.gcno' -or -name '*.gcda' \) -exec mv {} . \;
              coveralls --exclude tests -E '.*gtest.*' --gcov-options '\-lp';
            fi;

  build-linux:
    parameters:
      python-version:
        type: string

    docker:
      - image: circleci/python:3.9

    environment:
      <<: *global-environment
      CIBW_PROJECT_REQUIRES_PYTHON: ~=<< parameters.python-version>>
      CIBW_ARCHS_LINUX: x86_64

    steps:
      - checkout
      - setup_remote_docker
      - restore_cache: &build-linux-restore-cache
          keys:
            - pip-{{ .Environment.CIRCLE_JOB }}-{{ checksum "pyproject.toml" }}
      - when:
          condition:
            equal: [3.6.8, << parameters.python-version>>]
          steps:
            - run: echo 'export CIBW_MANYLINUX_X86_64_IMAGE=manylinux1' >> $BASH_ENV
      - run: &build-linux-wheels
          name: build wheels
          command: |
            python3 -m venv env
            . env/bin/activate
            pip install pip --upgrade
            pip install cibuildwheel==2.3.0
            cibuildwheel --output-dir dist
      - save_cache: &build-linux-save-cache
          paths:
            - ~/.cache/pip
          key: pip-{{ .Environment.CIRCLE_JOB }}-{{ checksum "pyproject.toml" }}
      - store_artifacts: &store-artifacts
          path: ./dist
      - persist_to_workspace: &persist-to-workspace
          root: ./dist/
          paths: .

  build-linux-aarch64:
    parameters:
      python-version:
        type: string

    machine:
      image: ubuntu-2004:202101-01

    resource_class: arm.medium

    environment:
      <<: *global-environment
      CIBW_PROJECT_REQUIRES_PYTHON: ~=<< parameters.python-version>>
      CIBW_ARCHS_LINUX: aarch64

    steps: &build-steps
      - checkout
      - restore_cache: *build-linux-restore-cache
      - run: *build-linux-wheels
      - save_cache: *build-linux-save-cache
      - store_artifacts: *store-artifacts
      - persist_to_workspace: *persist-to-workspace

  build-osx:
    parameters:
      python-version:
        type: string
      cibw-arch:
        type: string

    macos:
      xcode: 13.2.0

    environment:
      <<: *global-environment
      CIBW_PROJECT_REQUIRES_PYTHON: ~=<< parameters.python-version>>
      CIBW_ARCHS_MACOS: << parameters.cibw-arch >>

    steps: *build-steps

  build-sdist:
    docker:
      - image: circleci/python:3.9

    steps:
      - checkout
      - run:
          name: build sdist
          command: |
            python -m venv env
            . env/bin/activate
            pip install -U pip setuptools
            pip install -r requirements.txt
            python setup.py sdist -d ./dist
      - store_artifacts: *store-artifacts
      - persist_to_workspace: *persist-to-workspace

  deploy-all:
    docker:
      - image: circleci/python:3.9

    steps:
      - attach_workspace:
          at: dist

      - store_artifacts:
          path: ./dist

      - run:
          name: deploy
          command: |
            python -m venv env
            . env/bin/activate
            python -m pip install twine
            twine upload -u "$PYPI_USERNAME" -p "$PYPI_PASSWORD" --skip-existing ./dist/*

  test-linux:
    parameters:
      python-version:
        type: string

    docker:
      - image: circleci/python:<< parameters.python-version >>

    steps:
      - checkout
      - attach_workspace:
          at: dist
      - run:
          name: install
          command: |
            python -m venv env
            . env/bin/activate
            pip install -U pip setuptools
            pip install -r requirements.txt
            pip install minorminer --no-index -f dist/ --force-reinstall --no-deps
      - run: &unix-run-tests
          name: run tests
          command: |
            . env/bin/activate
            pip install -r test_requirements.txt
            cd tests
            python -m pytest .

  test-osx:
    parameters:
      python-version:
        type: string

    macos:
      xcode: 13.2.0

    environment:
      <<: *global-environment
      HOMEBREW_NO_AUTO_UPDATE: 1

    steps:
      - checkout
      - attach_workspace:
          at: dist
      - run:
          name: install pyenv
          command: |
            brew install pyenv
      - restore_cache:
          keys:
            - pyenv-{{ .Environment.CIRCLE_JOB }}-xcode13.2.0
      - when:
          # see https://github.com/pyenv/pyenv/issues/1643. We use an intermediate
          # file so we can use the --skip-existing without raising errors from curl
          condition:
            equal: [3.6.8, << parameters.python-version>>]
          steps:
            - run:
                name: Install Python 3.6 with a patch
                command: |
                  curl -sSL https://github.com/python/cpython/commit/8ea6353.patch > tmp.txt
                  pyenv install -s --patch 3.6.8 < tmp.txt
      - run:
          name: install python
          command: |
            pyenv install << parameters.python-version>> -s
      - save_cache:
          paths:
            - ~/.pyenv
          key: pyenv-{{ .Environment.CIRCLE_JOB }}-xcode13.2.0
      - run:
          name: install
          command: |
            eval "$(pyenv init --path)"
            eval "$(pyenv init -)"
            pyenv local << parameters.python-version >>
            python -m venv env
            . env/bin/activate
            pip install pip --upgrade
            pip install -U pip setuptools
            pip install -r requirements.txt
            pip install -r test_requirements.txt
            pip install minorminer --no-index -f dist/ --force-reinstall --no-deps
      - run: *unix-run-tests

workflows:
  version: 2.1
  test:
    jobs:
      - coverage-gcc
      - coverage-gcc-48
      - coverage-clang
      - coverage-osx
      - build-linux: &build
          matrix:
            parameters:
              python-version: &python-versions [3.6.8, 3.7.9, 3.8.9, 3.9.4, 3.10.0]
      - build-linux-aarch64: *build
      - build-sdist
      - build-osx: &build-osx
          matrix:
            parameters:
              python-version: *python-versions
              cibw-arch: [x86_64, universal2]
            exclude:
              - python-version: 3.6.8
                cibw-arch: universal2
              - python-version: 3.7.9
                cibw-arch: universal2
      - test-linux:
          requires:
            - build-linux
          matrix:
            parameters:
              python-version: *python-versions
      - test-osx:
          name: test-osx-py<< matrix.python-version >>
          requires:
            - build-osx
          matrix:
            parameters:
              python-version: *python-versions     
  deploy:
    jobs:
      - build-linux:
          <<: *build
          filters: &deploy-filters
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc|\.post)([0-9]+)?)?$/
            branches:
              ignore: /.*/
      - build-linux-aarch64:
          <<: *build
          filters: *deploy-filters
      - build-osx:
          <<: *build-osx
          filters: *deploy-filters
      - build-sdist:
          filters: *deploy-filters
      - deploy-all:
          filters: *deploy-filters
          requires:
            - build-linux
            - build-linux-aarch64
            - build-osx
            - build-sdist
